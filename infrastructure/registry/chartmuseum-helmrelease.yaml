apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: chartmuseum
spec:
  chart:
    spec:
      chart: chartmuseum
      sourceRef:
        kind: HelmRepository
        name: chartmuseum
      version: "3.7.0"
  interval: 1h0m0s
  values:
    env:
      open:
        # storage backend, can be one of: local, alibaba, amazon, google, microsoft, oracle
        STORAGE: local
        # oss bucket to store charts for alibaba storage backend
        STORAGE_ALIBABA_BUCKET:
        # prefix to store charts for alibaba storage backend
        STORAGE_ALIBABA_PREFIX:
        # oss endpoint to store charts for alibaba storage backend
        STORAGE_ALIBABA_ENDPOINT:
        # server side encryption algorithm for alibaba storage backend, can be one
        # of: AES256 or KMS
        STORAGE_ALIBABA_SSE:
        # s3 bucket to store charts for amazon storage backend
        STORAGE_AMAZON_BUCKET:
        # prefix to store charts for amazon storage backend
        STORAGE_AMAZON_PREFIX:
        # region of s3 bucket to store charts
        STORAGE_AMAZON_REGION:
        # alternative s3 endpoint
        STORAGE_AMAZON_ENDPOINT:
        # server side encryption algorithm
        STORAGE_AMAZON_SSE:
        # gcs bucket to store charts for google storage backend
        STORAGE_GOOGLE_BUCKET:
        # prefix to store charts for google storage backend
        STORAGE_GOOGLE_PREFIX:
        # container to store charts for microsoft storage backend
        STORAGE_MICROSOFT_CONTAINER:
        # prefix to store charts for microsoft storage backend
        STORAGE_MICROSOFT_PREFIX:
        # container to store charts for openstack storage backend
        STORAGE_OPENSTACK_CONTAINER:
        # prefix to store charts for openstack storage backend
        STORAGE_OPENSTACK_PREFIX:
        # region of openstack container
        STORAGE_OPENSTACK_REGION:
        # path to a CA cert bundle for your openstack endpoint
        STORAGE_OPENSTACK_CACERT:
        # compartment id for for oracle storage backend
        STORAGE_ORACLE_COMPARTMENTID:
        # oci bucket to store charts for oracle storage backend
        STORAGE_ORACLE_BUCKET:
        # prefix to store charts for oracle storage backend
        STORAGE_ORACLE_PREFIX:
        # form field which will be queried for the chart file content
        CHART_POST_FORM_FIELD_NAME: chart
        # form field which will be queried for the provenance file content
        PROV_POST_FORM_FIELD_NAME: prov
        # levels of nested repos for multitenancy. The default depth is 0 (singletenant server)
        DEPTH: 0
        # show debug messages
        DEBUG: false
        # output structured logs as json
        LOG_JSON: false
        # disable use of index-cache.yaml
        DISABLE_STATEFILES: false
        # disable Prometheus metrics
        DISABLE_METRICS: false
        # disable all routes prefixed with /api
        DISABLE_API: false
        # allow chart versions to be re-uploaded
        ALLOW_OVERWRITE: true
        # absolute url for .tgzs in index.yaml
        CHART_URL:
        # allow anonymous GET operations when auth is used
        AUTH_ANONYMOUS_GET: true
        # sets the base context path
        CONTEXT_PATH:
        # parallel scan limit for the repo indexer
        INDEX_LIMIT: 0
        # cache store, can be one of: redis (leave blank for inmemory cache)
        CACHE:
        # address of Redis service (host:port)
        CACHE_REDIS_ADDR:
        # Redis database to be selected after connect
        CACHE_REDIS_DB: 0
        # enable bearer auth
        BEARER_AUTH: false
        # auth realm used for bearer auth
        AUTH_REALM:
        # auth service used for bearer auth
        AUTH_SERVICE:
      secret:
        # username for basic http authentication
        BASIC_AUTH_USER:
        # password for basic http authentication
        BASIC_AUTH_PASS:
        # GCP service account json file
        GOOGLE_CREDENTIALS_JSON:
        # Redis requirepass server configuration
        CACHE_REDIS_PASSWORD:
      # Name of an existing secret to get the secret values ftom
      existingSecret: chartmuseum-auth
      existingSecretMappings:
        BASIC_AUTH_USER: BASIC_AUTH_USER
        BASIC_AUTH_PASS: BASIC_AUTH_PASS
    serviceMonitor:
      enabled: true
      labels:
        release: kube-prometheus-stack
    persistence:
      enabled: true
      storageClass: "-"
      volumeName: &volume mmontes
      pv:
        enabled: true
        pvname: *volume
        capacity:
          storage: 8Gi
        accessMode: ReadWriteOnce
        nfs:
          server: nas.local
          path: /volume1/chartmuseum/mmontes
